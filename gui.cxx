// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "gui.h"

void GUI::cb_Load_i(Fl_Button*, void*) {
  LoadFile_cb();
}
void GUI::cb_Load(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void GUI::cb_Filename_i(Fl_File_Input*, void*) {
  ReadFile_cb();
}
void GUI::cb_Filename(Fl_File_Input* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Filename_i(o,v);
}

void GUI::cb_SaveTo_i(Fl_File_Input*, void*) {
  SaveTo_cb();
}
void GUI::cb_SaveTo(Fl_File_Input* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_SaveTo_i(o,v);
}

void GUI::cb_Save_i(Fl_Button*, void*) {
  Save_cb();
}
void GUI::cb_Save(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void GUI::cb_Edge_i(Fl_Button*, void*) {
  edgeDetect_cb();
}
void GUI::cb_Edge(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Edge_i(o,v);
}

void GUI::cb_BrightPercent_i(Fl_Input*, void*) {
  bright_cb();
}
void GUI::cb_BrightPercent(Fl_Input* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_BrightPercent_i(o,v);
}

void GUI::cb_Adjust_i(Fl_Button*, void*) {
  AdjustBrightness_cb();
}
void GUI::cb_Adjust(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Adjust_i(o,v);
}

void GUI::cb_Click_i(Fl_Button*, void*) {
  drawName_cb();
}
void GUI::cb_Click(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Click_i(o,v);
}

void GUI::cb_VisualizeButton_i(Fl_Button*, void*) {
  visual_cb();
}
void GUI::cb_VisualizeButton(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_VisualizeButton_i(o,v);
}

void GUI::cb_Up_i(Fl_Button*, void*) {
  up_cb();
}
void GUI::cb_Up(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Up_i(o,v);
}

void GUI::cb_Down_i(Fl_Button*, void*) {
  down_cb();
}
void GUI::cb_Down(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Down_i(o,v);
}

void GUI::cb_Left_i(Fl_Button*, void*) {
  left_cb();
}
void GUI::cb_Left(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Left_i(o,v);
}

void GUI::cb_Right_i(Fl_Button*, void*) {
  right_cb();
}
void GUI::cb_Right(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Right_i(o,v);
}

void GUI::cb_Front_i(Fl_Button*, void*) {
  front_cb();
}
void GUI::cb_Front(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Front_i(o,v);
}

void GUI::cb_Back_i(Fl_Button*, void*) {
  back_cb();
}
void GUI::cb_Back(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Back_i(o,v);
}

void GUI::cb_Zoom_i(Fl_Button*, void*) {
  zoomin_cb();
}
void GUI::cb_Zoom(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Zoom_i(o,v);
}

void GUI::cb_Zoom1_i(Fl_Button*, void*) {
  zoomout_cb();
}
void GUI::cb_Zoom1(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Zoom1_i(o,v);
}

void GUI::cb_Pan_i(Fl_Button*, void*) {
  panl_cb();
}
void GUI::cb_Pan(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Pan_i(o,v);
}

void GUI::cb_Tilt_i(Fl_Button*, void*) {
  tiltl_cb();
}
void GUI::cb_Tilt(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Tilt_i(o,v);
}

void GUI::cb_Roll_i(Fl_Button*, void*) {
  rolll_cb();
}
void GUI::cb_Roll(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Roll_i(o,v);
}

void GUI::cb_Play_i(Fl_Button*, void*) {
  play_cb();
}
void GUI::cb_Play(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Play_i(o,v);
}

void GUI::cb_pointLightx_i(Fl_Input*, void*) {
  pointLightx_cb();
}
void GUI::cb_pointLightx(Fl_Input* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_pointLightx_i(o,v);
}

void GUI::cb_pointLighty_i(Fl_Input*, void*) {
  pointLighty_cb();
}
void GUI::cb_pointLighty(Fl_Input* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_pointLighty_i(o,v);
}

void GUI::cb_pointLightz_i(Fl_Input*, void*) {
  pointLightz_cb();
}
void GUI::cb_pointLightz(Fl_Input* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_pointLightz_i(o,v);
}

void GUI::cb_ka_i(Fl_Input*, void*) {
  ka_cb();
}
void GUI::cb_ka(Fl_Input* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_ka_i(o,v);
}

void GUI::cb_es_i(Fl_Input*, void*) {
  es_cb();
}
void GUI::cb_es(Fl_Input* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_es_i(o,v);
}

void GUI::cb_Draw_i(Fl_Button*, void*) {
  drawPointLight_cb();
}
void GUI::cb_Draw(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Draw_i(o,v);
}

void GUI::cb_SM1_i(Fl_Button*, void*) {
  sm1_cb();
}
void GUI::cb_SM1(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_SM1_i(o,v);
}

void GUI::cb_SM2_i(Fl_Button*, void*) {
  sm2_cb();
}
void GUI::cb_SM2(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_SM2_i(o,v);
}

void GUI::cb_SM3_i(Fl_Button*, void*) {
  sm3_cb();
}
void GUI::cb_SM3(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_SM3_i(o,v);
}

void GUI::cb_SM2Play_i(Fl_Button*, void*) {
  SM2Play_cb();
}
void GUI::cb_SM2Play(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_SM2Play_i(o,v);
}

void GUI::cb_SM3Play_i(Fl_Button*, void*) {
  SM3Play_cb();
}
void GUI::cb_SM3Play(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_SM3Play_i(o,v);
}

void GUI::cb_SM2SM3_i(Fl_Button*, void*) {
  SM2SM3_cb();
}
void GUI::cb_SM2SM3(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_SM2SM3_i(o,v);
}

void GUI::cb_bilinear_i(Fl_Button*, void*) {
  bilinear_cb();
}
void GUI::cb_bilinear(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_bilinear_i(o,v);
}

void GUI::cb_nearest_i(Fl_Button*, void*) {
  nearest_cb();
}
void GUI::cb_nearest(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_nearest_i(o,v);
}

void GUI::cb_repeat_i(Fl_Button*, void*) {
  repeat_cb();
}
void GUI::cb_repeat(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_repeat_i(o,v);
}

void GUI::cb_mirror_i(Fl_Button*, void*) {
  mirror_cb();
}
void GUI::cb_mirror(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_mirror_i(o,v);
}

void GUI::cb_Display_i(Fl_Button*, void*) {
  display_cb();
}
void GUI::cb_Display(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Display_i(o,v);
}

void GUI::cb_Shadow_i(Fl_Button*, void*) {
  shadow_cb();
}
void GUI::cb_Shadow(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Shadow_i(o,v);
}

void GUI::cb_Play1_i(Fl_Button*, void*) {
  playhw_cb();
}
void GUI::cb_Play1(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Play1_i(o,v);
}

void GUI::cb_Pan1_i(Fl_Button*, void*) {
  panr_cb();
}
void GUI::cb_Pan1(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Pan1_i(o,v);
}

void GUI::cb_Tilt1_i(Fl_Button*, void*) {
  tiltr_cb();
}
void GUI::cb_Tilt1(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Tilt1_i(o,v);
}

void GUI::cb_Roll1_i(Fl_Button*, void*) {
  rollr_cb();
}
void GUI::cb_Roll1(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Roll1_i(o,v);
}

void GUI::cb_EM_i(Fl_Button*, void*) {
  emsw_cb();
}
void GUI::cb_EM(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_EM_i(o,v);
}

void GUI::cb_Panorama_i(Fl_Button*, void*) {
  panorama_cb();
}
void GUI::cb_Panorama(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Panorama_i(o,v);
}
#include "scene.h"

GUI::GUI() {
  { uiw = new Fl_Double_Window(870, 657, "Control Center");
    uiw->user_data((void*)(this));
    { Load = new Fl_Button(289, 49, 85, 30, "Load");
      Load->callback((Fl_Callback*)cb_Load);
    } // Fl_Button* Load
    { Filename = new Fl_File_Input(85, 44, 185, 37, "Load file:");
      Filename->callback((Fl_Callback*)cb_Filename);
    } // Fl_File_Input* Filename
    { SaveTo = new Fl_File_Input(85, 80, 185, 39, "Save file:");
      SaveTo->callback((Fl_Callback*)cb_SaveTo);
    } // Fl_File_Input* SaveTo
    { Save = new Fl_Button(289, 87, 85, 30, "Save");
      Save->callback((Fl_Callback*)cb_Save);
    } // Fl_Button* Save
    { Fl_Button* o = new Fl_Button(60, 122, 315, 40, "Edge Detect");
      o->callback((Fl_Callback*)cb_Edge);
    } // Fl_Button* o
    { BrightPercent = new Fl_Input(220, 169, 60, 27, "Adjust Brightness by %: ");
      BrightPercent->callback((Fl_Callback*)cb_BrightPercent);
    } // Fl_Input* BrightPercent
    { Fl_Button* o = new Fl_Button(295, 166, 80, 35, "Adjust");
      o->callback((Fl_Callback*)cb_Adjust);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(60, 210, 315, 40, "Click to draw my name");
      o->callback((Fl_Callback*)cb_Click);
    } // Fl_Button* o
    { VisualizeButton = new Fl_Button(542, 538, 124, 32, "Visualize Camera");
      VisualizeButton->callback((Fl_Callback*)cb_VisualizeButton);
    } // Fl_Button* VisualizeButton
    { Fl_Button* o = new Fl_Button(570, 350, 65, 50, "Up");
      o->callback((Fl_Callback*)cb_Up);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(570, 402, 65, 50, "Down");
      o->callback((Fl_Callback*)cb_Down);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(507, 402, 58, 51, "Left");
      o->callback((Fl_Callback*)cb_Left);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(638, 399, 64, 53, "Right");
      o->callback((Fl_Callback*)cb_Right);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(505, 465, 90, 30, "Front");
      o->callback((Fl_Callback*)cb_Front);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(605, 465, 95, 30, "Back");
      o->callback((Fl_Callback*)cb_Back);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(720, 424, 64, 30, "Zoom in");
      o->callback((Fl_Callback*)cb_Zoom);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(789, 423, 64, 30, "Zoom out");
      o->callback((Fl_Callback*)cb_Zoom1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(722, 461, 64, 30, "Pan left");
      o->callback((Fl_Callback*)cb_Pan);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(722, 496, 64, 30, "Tilt up");
      o->callback((Fl_Callback*)cb_Tilt);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(722, 530, 64, 30, "Roll left");
      o->callback((Fl_Callback*)cb_Roll);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(505, 500, 90, 30, "Play SW");
      o->callback((Fl_Callback*)cb_Play);
    } // Fl_Button* o
    { pointLightx = new Fl_Input(191, 295, 59, 35, "Point light position (x,y,z):");
      pointLightx->callback((Fl_Callback*)cb_pointLightx);
    } // Fl_Input* pointLightx
    { pointLighty = new Fl_Input(250, 295, 55, 35);
      pointLighty->callback((Fl_Callback*)cb_pointLighty);
    } // Fl_Input* pointLighty
    { pointLightz = new Fl_Input(303, 295, 60, 35);
      pointLightz->callback((Fl_Callback*)cb_pointLightz);
    } // Fl_Input* pointLightz
    { ka = new Fl_Input(130, 355, 95, 30, "Ambient factor: ");
      ka->callback((Fl_Callback*)cb_ka);
    } // Fl_Input* ka
    { es = new Fl_Input(157, 390, 68, 30, "Specular exponent: ");
      es->callback((Fl_Callback*)cb_es);
    } // Fl_Input* es
    { Fl_Button* o = new Fl_Button(375, 295, 50, 30, "Draw");
      o->callback((Fl_Callback*)cb_Draw);
    } // Fl_Button* o
    { SM1 = new Fl_Button(30, 444, 55, 25, "SM1");
      SM1->callback((Fl_Callback*)cb_SM1);
    } // Fl_Button* SM1
    { SM2 = new Fl_Button(85, 444, 55, 25, "SM2");
      SM2->callback((Fl_Callback*)cb_SM2);
    } // Fl_Button* SM2
    { SM3 = new Fl_Button(140, 444, 55, 25, "SM3");
      SM3->callback((Fl_Callback*)cb_SM3);
    } // Fl_Button* SM3
    { SM2Play = new Fl_Button(300, 355, 125, 35, "SM2 Moving Light");
      SM2Play->callback((Fl_Callback*)cb_SM2Play);
    } // Fl_Button* SM2Play
    { SM3Play = new Fl_Button(300, 398, 125, 35, "SM3 Moving Light");
      SM3Play->callback((Fl_Callback*)cb_SM3Play);
    } // Fl_Button* SM3Play
    { SM2SM3 = new Fl_Button(300, 440, 125, 30, "Comparing SM2/3");
      SM2SM3->callback((Fl_Callback*)cb_SM2SM3);
    } // Fl_Button* SM2SM3
    { bilinear = new Fl_Button(30, 495, 205, 30, "Bilinear texture lookup");
      bilinear->callback((Fl_Callback*)cb_bilinear);
    } // Fl_Button* bilinear
    { nearest = new Fl_Button(30, 535, 205, 35, "Nearest naighbor texture lookup");
      nearest->callback((Fl_Callback*)cb_nearest);
    } // Fl_Button* nearest
    { repeat = new Fl_Button(244, 494, 125, 30, "Repitation tiling");
      repeat->callback((Fl_Callback*)cb_repeat);
    } // Fl_Button* repeat
    { mirror = new Fl_Button(244, 540, 125, 30, "Mirror tiling");
      mirror->callback((Fl_Callback*)cb_mirror);
    } // Fl_Button* mirror
    { Fl_Button* o = new Fl_Button(375, 495, 50, 75, "Display");
      o->callback((Fl_Callback*)cb_Display);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(195, 444, 64, 25, "Shadow");
      o->callback((Fl_Callback*)cb_Shadow);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(605, 500, 95, 30, "Play HW");
      o->callback((Fl_Callback*)cb_Play1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(788, 461, 64, 30, "Pan right");
      o->callback((Fl_Callback*)cb_Pan1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(788, 496, 64, 30, "Tilt down");
      o->callback((Fl_Callback*)cb_Tilt1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(788, 530, 64, 30, "Roll right");
      o->callback((Fl_Callback*)cb_Roll1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(720, 387, 64, 30, "EM SW");
      o->callback((Fl_Callback*)cb_EM);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(786, 387, 68, 30, "Panorama");
      o->callback((Fl_Callback*)cb_Panorama);
    } // Fl_Button* o
    uiw->end();
  } // Fl_Double_Window* uiw
}

int main(int argc, char **argv) {
  scene = new Scene;
  return Fl::run();
}

void GUI::show() {
  uiw->show();
}

void GUI::LoadFile_cb() {
  scene->LoadFile();
}

void GUI::ReadFile_cb() {
  scene->ReadFile();
}

void GUI::bright_cb() {
  scene->BrightPercent();
}

void GUI::edgeDetect_cb() {
  scene->EdgeDetect();
}

void GUI::Save_cb() {
  scene->SaveFile();
}

void GUI::SaveTo_cb() {
  scene->SaveTo();
}

void GUI::AdjustBrightness_cb() {
  scene->AdjustBrightness();
}

void GUI::drawName_cb() {
  scene->DrawName();
}

void GUI::visual_cb() {
  scene->Visualize();
}

void GUI::up_cb() {
  scene->Up();
}

void GUI::down_cb() {
  scene->Down();
}

void GUI::left_cb() {
  scene->Left();
}

void GUI::right_cb() {
  scene->Right();
}

void GUI::front_cb() {
  scene->Front();
}

void GUI::back_cb() {
  scene->Back();
}

void GUI::panl_cb() {
  scene->PanLeft();
}

void GUI::tiltl_cb() {
  scene->TiltUp();
}

void GUI::rolll_cb() {
  scene->RollLeft();
}

void GUI::zoomin_cb() {
  scene->ZoomIn();
}

void GUI::zoomout_cb() {
  scene->ZoomOut();
}

void GUI::play_cb() {
  scene->Play();
}

void GUI::pointLightx_cb() {
  scene->pointLightx();
}

void GUI::pointLighty_cb() {
  scene->pointLighty();
}

void GUI::pointLightz_cb() {
  scene->pointLightz();
}

void GUI::ka_cb() {
  scene->Ka();
}

void GUI::es_cb() {
  scene->Es();
}

void GUI::sm1_cb() {
  scene->SM1();
}

void GUI::sm2_cb() {
  scene->SM2();
}

void GUI::sm3_cb() {
  scene->SM3();
}

void GUI::drawPointLight_cb() {
  scene->DrawPointLight();
}

void GUI::SM2Play_cb() {
  scene->SM2Play();
}

void GUI::SM3Play_cb() {
  scene->SM3Play();
}

void GUI::SM2SM3_cb() {
  scene->SM2SM3();
}

void GUI::bilinear_cb() {
  scene->Bilinear();
}

void GUI::nearest_cb() {
  scene->Nearest();
}

void GUI::repeat_cb() {
  scene->Repeat();
}

void GUI::mirror_cb() {
  scene->Mirror();
}

void GUI::display_cb() {
  scene->Display();
}

void GUI::shadow_cb() {
  scene->Shadow();
}

void GUI::playhw_cb() {
  scene->PlayHW();
}

void GUI::panr_cb() {
  scene->PanRight();
}

void GUI::tiltr_cb() {
  scene->TiltDown();
}

void GUI::rollr_cb() {
  scene->RollRight();
}

void GUI::emsw_cb() {
  scene->EMSW();
}

void GUI::panorama_cb() {
  scene->Panorama();
}
