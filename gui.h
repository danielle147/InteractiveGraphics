// generated by Fast Light User Interface Designer (fluid) version 1.0108

#ifndef gui_h
#define gui_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_File_Input.H>
#include <FL/Fl_Input.H>

class GUI {
public:
  GUI();
  Fl_Double_Window *uiw;
  Fl_Button *Load;
private:
  void cb_Load_i(Fl_Button*, void*);
  static void cb_Load(Fl_Button*, void*);
public:
  Fl_File_Input *Filename;
private:
  void cb_Filename_i(Fl_File_Input*, void*);
  static void cb_Filename(Fl_File_Input*, void*);
public:
  Fl_File_Input *SaveTo;
private:
  void cb_SaveTo_i(Fl_File_Input*, void*);
  static void cb_SaveTo(Fl_File_Input*, void*);
public:
  Fl_Button *Save;
private:
  void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
  void cb_Edge_i(Fl_Button*, void*);
  static void cb_Edge(Fl_Button*, void*);
public:
  Fl_Input *BrightPercent;
private:
  void cb_BrightPercent_i(Fl_Input*, void*);
  static void cb_BrightPercent(Fl_Input*, void*);
  void cb_Adjust_i(Fl_Button*, void*);
  static void cb_Adjust(Fl_Button*, void*);
  void cb_Click_i(Fl_Button*, void*);
  static void cb_Click(Fl_Button*, void*);
public:
  Fl_Button *VisualizeButton;
private:
  void cb_VisualizeButton_i(Fl_Button*, void*);
  static void cb_VisualizeButton(Fl_Button*, void*);
  void cb_Up_i(Fl_Button*, void*);
  static void cb_Up(Fl_Button*, void*);
  void cb_Down_i(Fl_Button*, void*);
  static void cb_Down(Fl_Button*, void*);
  void cb_Left_i(Fl_Button*, void*);
  static void cb_Left(Fl_Button*, void*);
  void cb_Right_i(Fl_Button*, void*);
  static void cb_Right(Fl_Button*, void*);
  void cb_Front_i(Fl_Button*, void*);
  static void cb_Front(Fl_Button*, void*);
  void cb_Back_i(Fl_Button*, void*);
  static void cb_Back(Fl_Button*, void*);
  void cb_Zoom_i(Fl_Button*, void*);
  static void cb_Zoom(Fl_Button*, void*);
  void cb_Zoom1_i(Fl_Button*, void*);
  static void cb_Zoom1(Fl_Button*, void*);
  void cb_Pan_i(Fl_Button*, void*);
  static void cb_Pan(Fl_Button*, void*);
  void cb_Tilt_i(Fl_Button*, void*);
  static void cb_Tilt(Fl_Button*, void*);
  void cb_Roll_i(Fl_Button*, void*);
  static void cb_Roll(Fl_Button*, void*);
  void cb_Play_i(Fl_Button*, void*);
  static void cb_Play(Fl_Button*, void*);
public:
  Fl_Input *pointLightx;
private:
  void cb_pointLightx_i(Fl_Input*, void*);
  static void cb_pointLightx(Fl_Input*, void*);
public:
  Fl_Input *pointLighty;
private:
  void cb_pointLighty_i(Fl_Input*, void*);
  static void cb_pointLighty(Fl_Input*, void*);
public:
  Fl_Input *pointLightz;
private:
  void cb_pointLightz_i(Fl_Input*, void*);
  static void cb_pointLightz(Fl_Input*, void*);
public:
  Fl_Input *ka;
private:
  void cb_ka_i(Fl_Input*, void*);
  static void cb_ka(Fl_Input*, void*);
public:
  Fl_Input *es;
private:
  void cb_es_i(Fl_Input*, void*);
  static void cb_es(Fl_Input*, void*);
  void cb_Draw_i(Fl_Button*, void*);
  static void cb_Draw(Fl_Button*, void*);
public:
  Fl_Button *SM1;
private:
  void cb_SM1_i(Fl_Button*, void*);
  static void cb_SM1(Fl_Button*, void*);
public:
  Fl_Button *SM2;
private:
  void cb_SM2_i(Fl_Button*, void*);
  static void cb_SM2(Fl_Button*, void*);
public:
  Fl_Button *SM3;
private:
  void cb_SM3_i(Fl_Button*, void*);
  static void cb_SM3(Fl_Button*, void*);
public:
  Fl_Button *SM2Play;
private:
  void cb_SM2Play_i(Fl_Button*, void*);
  static void cb_SM2Play(Fl_Button*, void*);
public:
  Fl_Button *SM3Play;
private:
  void cb_SM3Play_i(Fl_Button*, void*);
  static void cb_SM3Play(Fl_Button*, void*);
public:
  Fl_Button *SM2SM3;
private:
  void cb_SM2SM3_i(Fl_Button*, void*);
  static void cb_SM2SM3(Fl_Button*, void*);
public:
  Fl_Button *bilinear;
private:
  void cb_bilinear_i(Fl_Button*, void*);
  static void cb_bilinear(Fl_Button*, void*);
public:
  Fl_Button *nearest;
private:
  void cb_nearest_i(Fl_Button*, void*);
  static void cb_nearest(Fl_Button*, void*);
public:
  Fl_Button *repeat;
private:
  void cb_repeat_i(Fl_Button*, void*);
  static void cb_repeat(Fl_Button*, void*);
public:
  Fl_Button *mirror;
private:
  void cb_mirror_i(Fl_Button*, void*);
  static void cb_mirror(Fl_Button*, void*);
  void cb_Display_i(Fl_Button*, void*);
  static void cb_Display(Fl_Button*, void*);
  void cb_Shadow_i(Fl_Button*, void*);
  static void cb_Shadow(Fl_Button*, void*);
  void cb_Play1_i(Fl_Button*, void*);
  static void cb_Play1(Fl_Button*, void*);
  void cb_Pan1_i(Fl_Button*, void*);
  static void cb_Pan1(Fl_Button*, void*);
  void cb_Tilt1_i(Fl_Button*, void*);
  static void cb_Tilt1(Fl_Button*, void*);
  void cb_Roll1_i(Fl_Button*, void*);
  static void cb_Roll1(Fl_Button*, void*);
  void cb_EM_i(Fl_Button*, void*);
  static void cb_EM(Fl_Button*, void*);
  void cb_Panorama_i(Fl_Button*, void*);
  static void cb_Panorama(Fl_Button*, void*);
public:
  void show();
  void LoadFile_cb();
  void ReadFile_cb();
  void bright_cb();
  void edgeDetect_cb();
  void Save_cb();
  void SaveTo_cb();
  void AdjustBrightness_cb();
  void drawName_cb();
  void visual_cb();
  void up_cb();
  void down_cb();
  void left_cb();
  void right_cb();
  void front_cb();
  void back_cb();
  void panl_cb();
  void tiltl_cb();
  void rolll_cb();
  void zoomin_cb();
  void zoomout_cb();
  void play_cb();
  void pointLightx_cb();
  void pointLighty_cb();
  void pointLightz_cb();
  void ka_cb();
  void es_cb();
  void sm1_cb();
  void sm2_cb();
  void sm3_cb();
  void drawPointLight_cb();
  void SM2Play_cb();
  void SM3Play_cb();
  void SM2SM3_cb();
  void bilinear_cb();
  void nearest_cb();
  void repeat_cb();
  void mirror_cb();
  void display_cb();
  void shadow_cb();
  void playhw_cb();
  void panr_cb();
  void tiltr_cb();
  void rollr_cb();
  void emsw_cb();
  void panorama_cb();
};
#endif
